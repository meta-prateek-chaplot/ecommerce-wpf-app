// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubSub.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace PubSub {
  /// <summary>
  /// Greeter
  /// </summary>
  public static partial class Notifier
  {
    static readonly string __ServiceName = "pubSub.Notifier";

    static readonly grpc::Marshaller<global::PubSub.HelloRequest> __Marshaller_HelloRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PubSub.HelloRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PubSub.HelloReply> __Marshaller_HelloReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PubSub.HelloReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PubSub.DataRequest> __Marshaller_DataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PubSub.DataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PubSub.DataReply> __Marshaller_DataReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PubSub.DataReply.Parser.ParseFrom);

    static readonly grpc::Method<global::PubSub.HelloRequest, global::PubSub.HelloReply> __Method_SayHello = new grpc::Method<global::PubSub.HelloRequest, global::PubSub.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_HelloRequest,
        __Marshaller_HelloReply);

    static readonly grpc::Method<global::PubSub.DataRequest, global::PubSub.DataReply> __Method_Data = new grpc::Method<global::PubSub.DataRequest, global::PubSub.DataReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Data",
        __Marshaller_DataRequest,
        __Marshaller_DataReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PubSub.PubSubReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Notifier</summary>
    public abstract partial class NotifierBase
    {
      public virtual global::System.Threading.Tasks.Task<global::PubSub.HelloReply> SayHello(global::PubSub.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Data(global::PubSub.DataRequest request, grpc::IServerStreamWriter<global::PubSub.DataReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Notifier</summary>
    public partial class NotifierClient : grpc::ClientBase<NotifierClient>
    {
      /// <summary>Creates a new client for Notifier</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NotifierClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Notifier that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NotifierClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NotifierClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NotifierClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::PubSub.HelloReply SayHello(global::PubSub.HelloRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SayHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PubSub.HelloReply SayHello(global::PubSub.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PubSub.HelloReply> SayHelloAsync(global::PubSub.HelloRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SayHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PubSub.HelloReply> SayHelloAsync(global::PubSub.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PubSub.DataReply> Data(global::PubSub.DataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Data(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PubSub.DataReply> Data(global::PubSub.DataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Data, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NotifierClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NotifierClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NotifierBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_Data, serviceImpl.Data).Build();
    }

  }
}
#endregion
